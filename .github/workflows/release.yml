# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ag/work
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # SWIMPY_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rg_version: ${{ env.SWIMPY_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "SWIMPY_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.SWIMPY_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SWIMPY_VERSION }}
          release_name: ${{ env.SWIMPY_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu]
        include:
        - build: linux
          os: ubuntu-18.04
        - build: linux-arm
          os: ubuntu-18.04
        - build: macos
          os: macos-latest
        - build: win-msvc
          os: windows-2019
        - build: win-gnu
          os: windows-2019

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
        architecture: x86

    - name: Install Dependencies and Pyinstaller
      shell: bash
      run: |
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build SwimPy
      run: |
        pyinstaller \
          -p dependencies/modelmanager \
          -p dependencies/m.swim \
          -p . \
          -F \
          --collect-submodules dependencies \
          -d noarchive \
          --add-data dependencies/modelmanager/modelmanager/:modelmanager \
          swimpy/scripts/swimpy

        if [ "${{matrix.os}}" = "windows-2019" ]; then
          echo "ASSET=dist/swimpy.exe" >> $GITHUB_ENV
        else
          echo "ASSET=dist/swimpy" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

